#include <stdio.h>
#include <stdlib.h>

typedef struct BST {
    int data;
    struct BST *lchild, *rchild;
} node;

node *create_node() {
    node *temp = (node *)malloc(sizeof(node));
    temp->lchild = NULL;
    temp->rchild = NULL;
    return temp;
}

void insert(node *root, node *new_node) {
    if (new_node->data < root->data) {
        if (root->lchild == NULL) {
            root->lchild = new_node;
        } else {
            insert(root->lchild, new_node);
        }
    } else if (new_node->data > root->data) {
        if (root->rchild == NULL) {
            root->rchild = new_node;
        } else {
            insert(root->rchild, new_node);
        }
    }
}

void inorder(node *temp) {
    if (temp != NULL) {
        inorder(temp->lchild);
        printf("%3d", temp->data);
        inorder(temp->rchild);
    }
}

void preorder(node *temp) {
    if (temp != NULL) {
        printf("%3d", temp->data);
        preorder(temp->lchild);
        preorder(temp->rchild);
    }
}

void postorder(node *temp) {
    if (temp != NULL) {
        postorder(temp->lchild);
        postorder(temp->rchild);
        printf("%3d", temp->data);
    }
}

int main() {
    int n, i;
    node *new_node, *root = NULL;

    printf("\nProgram For Binary Search Tree\n");
    printf("Enter number of elements: ");
    scanf("%d", &n);

    for (i = 1; i <= n; i++) {
        new_node = create_node();
        printf("\nEnter the element: ");
        scanf("%d", &new_node->data);
        if (root == NULL) {
            root = new_node;
        } else {
            insert(root, new_node);
        }
    }

    printf("\nThe Inorder display: ");
    inorder(root);
    printf("\nThe Preorder display: ");
    preorder(root);
    printf("\nThe Postorder display: ");
    postorder(root);
    printf("\n");

    free(new_node); 
    return 0;
}
