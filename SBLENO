#include <stdio.h>
#include <stdlib.h>

int A[100], n, key;

int Isearch(int A[], int n, int key) {
    int i;
    for (i = 0; i < n; i++) {
        if (A[i] == key)
            return i;
    }
    return -1;
}

int binsearch(int A[], int n, int key) {
    int first, last, mid;
    first = 0;
    last = n-1;
    while (first <= last) {
        mid = (first + last) / 2;
        if (key == A[mid])
            return mid;
        else if (key < A[mid])
            last = mid-1;
        else
            first = mid+1;
    }
    return -1;
}

void acceptInput() {
    int i;
    printf("Enter Number of Elements: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        printf("Enter Element %d: ", i);
        scanf("%d", &A[i]);
    }
    printf("Enter an Element to be searched: ");
    scanf("%d", &key);
}

int main() {
    int ch, flag;
    while (1) {
        printf("\nSearching Techniques\n");
        printf("*******************\n");
        printf("1. Linear Search\n");
        printf("2. Binary Search\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                acceptInput();
                flag = Isearch(A, n, key);
                if (flag == -1)
                    printf("Search is Unsuccessful\n");
                else
                    printf("An Element %d is found at position %d\n", key, flag);
                break;
            case 2:
                printf("Enter Elements in Ascending Order for Binary Search\n");
                acceptInput();
                flag = binsearch(A, n, key);
                if (flag == -1)
                    printf("Search is Unsuccessful\n");
                else
                    printf("An Element %d is found at position %d\n", key, flag);
                break;
            case 3:
                exit(0);
            default:
                printf("Invalid Choice\n");
        }
    }
    return 0;
}
